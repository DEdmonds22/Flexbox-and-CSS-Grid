* {
    /* height & width now includes border & padding */
    box-sizing: border-box;
  }
  
body {
    margin: 0;
    font-family: Helvetica;
}

/* FLEXBOX */
    /* Why Use Flexbox? */
        /* Flexbox excels at assisting devs w/ the following task: 
            + Vertically centering content & elements within a container element.
            + Spacing child elements within a container uniformly.
            + Making the height of child elements laid out in columns the same even though they have a different amount of content. */

    /* Flexbox Fundamentals */
        /* We use a CSS display: flex; declaration to make an element a flex container, for example:
            section {
                display: flex;
            }
        /* The code above makes all <section> elements flex container and all direct children become flex items */

    /* Your First Flexbox */
            /* By default nav & div elements are block elements. */
            /* Which element do we need to make the flex container? */
nav {
    display: flex;  /* nav display is no longer block, it's flex. */
    height: 50px;   /* sets height of nav bar to 50px */
    background-color: #a2cbb6;  /* set bg color of nav bar to #a2cbb6 */
    flex-direction: row;    /* default value, doesn't need to be set if default value */
    justify-content: flex-start;    /* default value, doesn't need to be set if default value */
}
            /* nav is now a flex container, and it's direct children (div) are now flex items, which are laid out in a row horizontally, the default layout of a flex container. */
            /* A flex container has a flex-direction property that defines the direction of its main axis. There are four values: 
                + row - the default; left to right in ltr; right to left in rtl
                + row-reverse -  right to left in ltr; left to right in rtl
                + column - same as row but top to bottom
                + column-reverse - same as row-reverse but bottom to top */
            /* A flex container has a main axis and a cross axis (represents the opposite direction of it's main axis). For example: 
                + If flex-direction: row; the: 
                    * main axis is horizontal
                    * cross axis is vertical
                + If flex-direction: column; the: 
                    * main axis is vertical
                    * cross-axis is horizontal */
            /* The concepts of main axis 7 cross axis come into play when it comes to sizing and layout properties, such as: 
                + justify-content: Controls alignment for the main axis
                    * flex-start - default
                    * flex-end
                    * start
                    * end
                    * left
                    * right
                    * center
                    * space-between
                    * space-around
                    * space-evenly
                + align-items: Controls alignment for the cross axis 
                    * stretch - default
                    * flex-start / start / self-start
                    * flex-end / end / self-end
                    * center
                    * baseline */

nav div {
    font-size: 20px;    /* sets font size of divs to 20px */
    margin: 10px;   /* sets margin around each indiviual div to 10px */
    color: #f3dba8; /* sets text color of divs to #f3dba8 */
}
            /* The div elements have became flex items, so they no longer behave as block elements - their width has collapsed to what's neccessary for their content and they are willing to sit side-by-side other element (like inline elements) */

nav > div:last-child {  /* selects the last child in the nav element, ie LOG*/
    margin-left: auto;  /* aligns <div>LOG</div> on the right*/
}

/* CSS */
    /* Why use CSS Grid? */
        /* CSS Grid is a great option when you have:
            + Any components that would beneifit from a grid-typ layout such as a "profile card", in other words, CSS Grid doesn;t have to apply to the whole page - it can be useful for laying out smaller "components" as well. */

    /* CSS Grid Fundamentals */
        /* unlike Flexbox, CSS Grid lays out its grid items in two-dimensions */
        /* CSS Grids have the concept of the following:
            + Tracks - either a row or column
            + Cells - a single section
            + Areas - a x by x section
            + Gaps */
    
    /* Your First CSS Grid */
body {
    display: grid;  /* generates a block-level grid */
    height: 100vh;  /* using height: 100vh; will make the <body> fill the height of the browser window so that the <footer> is at the bottom. */
    margin: 0;  /* 0 margin around the body element */
    font-family: Helvetica;
    grid-template-columns: 1fr 4fr; /* the first column is 1/5 of the available space, while the second column is 4/5 */
    grid-template-rows: 50px 1fr 30px; /* first row is 50px, second row is 1fr of available space, thrid row is 30px */
    gap: 5px; /* replaces grid-gap because it's obsolete; specifies width of grid lines */
}
        /* A CSS Grid has a single column by default. */
        /* Each grid item (direct child) is placed on its own row by default. */
        /* Each grid item gets placed in each cell accross columns from left to right, this is its default behavior. */
        /* NOTE that the grid gaps cannot be styled - the grid's background simply shows through. */

aside {
    background-color: #a2b4da;
}

main {
    background-color: #f3dba8;
}

footer {
    background-color: #a2cbb6;
}

        /* What if we want to center the text in those elements both horizontal and vertically? We can create a class that will make any element w/ that class a Flexbox: */
.flex-ctr {
    display: flex;
    justify-content: center;
    align-items: center;
}

nav, footer {
   grid-column: 1/3; /* grid-column determins which grid lines a grid item starts and ends on. The lines are numbered string w/ 1 (not zero).*/
   grid-row: inherit;
}
        /* grid-column: span 2; has the same affect as grid-column: 1/3; */
        /* grid-column is shorthand for grid-column-start & grid-column-end */
        /* grid-row is shorthand for grid-row-start & grid-row-end */